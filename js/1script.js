// SETTINGS
// SETTINGS
// SETTINGS
let WPM = 0
let TargetWPM = 150
let SpeedTransitionIncrement = 50
let Text = 'P√§rnu lennujaam teenindas eelmisel aastal 2087 reisijat, mida on 800 reisija v√µrra v√§hem kui 2022. aastal. Lennujaama tulud eelmisel aastal kasvasid, kuid sellegipoolest majandab lennujaam end suuresti √§ra vaid riigi ja kohaliku omavalitsuse toel. P√§rnu lennujaam teenindas eelmisel aastal P√§rnu-Ruhnu ja suvel Helsingi-P√§rnu liini, samuti eralende ja tellimuslende. Reisijaid oli 2023. aastal tunamullusega v√§hem. Seda peamiselt suvise Stockholmi-P√§rnu lennuliini √§raj√§√§mise ja Helsingi liini v√§hese t√§itumuse t√µttu. Lennujaama tulud olid eelmisel aastal ligi 1,7 miljonit eurot, millest otseselt lennundusega teenitud tulu oli 140,000 eurot. √úlej√§√§nu moodustas riigi toetus ja sihtfinantseering ning kohaliku omavalitsuse toetus. V√µrreldes 2022. aastaga kasvasid nii lennujaama kulud kui ka tulud. "K√ºll on vajanud hooldetehnika rohkem remonti, ametikohad on n√º√ºd meil t√§idetud. Samas ka lennuv√§lja angaar toob meile tulu sisse rohkem ja ka p√§ikesepargid toodavad," lausus P√§rnu lennujaama k√§itusjuht Erki Teem√§gi. Teem√§gi s√µnul kasvatati tulusid ka tellimuslendude ja eralendude arvelt. "Soomest ja Rootsist ka ajalooliste lennukitega, kuhu mahub rohkem reisijaid peale, mis l√§hevad tellimuslendude alla. Samas oli ka 2023. aastal varasemast palju aktiivsemalt floora ja fauna vaatluslendusid P√§rnu lahe kohal," √ºtles Teem√§gi. "See oleks m√µeldav, aga kindlasti on see v√§ga kauge unistus, sest see eeldab v√§hemalt kahte liinilendu p√§evas korraliku 70-kohalise v√µi 100-kohalise lennukiga," nentis Teem√§gi. Esmasp√§eval tuli info, et eelmise aasta suvel P√§rnu ettev√µtjate toel t√∂√∂s hoitud Helsingi-P√§rnu liini sel suvel ei avata, sest ettev√µtjad seda ei rahasta.'
// i dont think this is gonna work out

// SCRIPT
// SCRIPT
// SCRIPT

let Playing = false
let index = 0

let formattedText = Text.split(" ");
var Length = formattedText.length

//console.log("Word count : " + Length)

let pause = document.getElementById("pause");
let play = document.getElementById("play");

let wordDisplay = document.getElementById("changetext"); // waa waaa, this isnt proper variable naming, waa waa üò≠üò≠

wordDisplay.Content = ""

function UpdateButtonVisuals() {

    if (Playing === false) {
        pause.style.display = "none";
        play.style.display = "contents";
    } else {
        pause.style.display = "contents";
        play.style.display = "none";
    }
}
function clamp(num, min, max) {
    return num <= min 
      ? min 
      : num >= max 
        ? max 
        : num
  }

function PlayPause(TryToStart) {
    console.log("Index: " + index)
    if (TryToStart === undefined || TryToStart === null) {
        TryToStart = true;
    }

    Playing = !Playing
    UpdateButtonVisuals()
    if (TryToStart && Playing) {
       if (index >= (Length-1)) {
        index = 0
       }
       WPM = 100
       function iterate() {

           if (index < Length && Playing) {

               let wordToDisplay = formattedText[index];
               let wordLength = wordToDisplay.length;

               // Calculate the number of characters to show on the left and right of the optimal recognition point
               let charactersToShow = Math.ceil(wordLength / 2);

               // Extract characters for left and right parts
               let leftPart = wordToDisplay.substring(0, charactersToShow);
               let rightPart = wordToDisplay.substring(charactersToShow + 1); // Exclude the character at the optimal recognition point

               // Extract the character at the optimal recognition point
               let recognitionPoint = wordToDisplay.charAt(charactersToShow);

               // Calculate the total width of the displayed word
               let wordWidth = leftPart.length + rightPart.length + 1; // Adding 1 for the highlighted character

               // Calculate padding for both sides of the highlighted character
               let padding = Math.floor((wordWidth - 1) / 2);

               // Combine left part, optimal recognition point, and right part with padding
               let formattedWord = 
                   "<span style='color: black;'>" + leftPart + "</span>" +
                   "<span style='color: red;'>" + recognitionPoint + "</span>" +
                   "<span style='color: black;'>" + rightPart + "</span>";

               // Apply padding for both sides of the formatted word
               formattedWord = formattedWord.padStart(formattedWord.length + padding, ' ');
               formattedWord = formattedWord.padEnd(formattedWord.length + padding, ' ');

               // Display the word
               wordDisplay.innerHTML = formattedWord;
               
               let OldWPM = WPM
               if (Math.abs(WPM-TargetWPM) > SpeedTransitionIncrement){
                   let Dir = clamp(TargetWPM-WPM,-1,1)
                   WPM = WPM + Dir*SpeedTransitionIncrement
               } else {
                   WPM = TargetWPM
               }
               if (OldWPM != WPM){
                   console.log(WPM)
               }
               
               let element = document.getElementById("progress")
               element.style.width = ((index/(Length-1))*100) + "%";

               // Calculate the duration to display the word based on the number of characters
               
             index++;
             if (index < Length && Playing) {
               setTimeout(iterate, (60/WPM)*1000 + wordLength*10);
             } else {
               if (Playing) {
                   //index = 0
                   PlayPause(false)
               }
           }
           } 
       }
       iterate()
    }
}
function ChangeSpeed(Speed) {
    var buttons = document.querySelectorAll('.button')
    let buttonNumber = (Speed-150)/100
    buttons.forEach(function(button, index) {
        if (index === buttonNumber) {
          button.classList.add('blue');
        } else {
          button.classList.remove('blue');
        }
      });
    
    TargetWPM = Speed
}
function OffsetIndex(Num) {
    index = clamp(index+Num,0,Length)

    let wordToDisplay = formattedText[index];
    let wordLength = wordToDisplay.length;

    // Calculate the number of characters to show on the left and right of the optimal recognition point
    let charactersToShow = Math.ceil(wordLength / 2);

    // Extract characters for left and right parts
    let leftPart = wordToDisplay.substring(0, charactersToShow);
    let rightPart = wordToDisplay.substring(charactersToShow + 1); // Exclude the character at the optimal recognition point

    // Extract the character at the optimal recognition point
    let recognitionPoint = wordToDisplay.charAt(charactersToShow);

    // Calculate the total width of the displayed word
    let wordWidth = leftPart.length + rightPart.length + 1; // Adding 1 for the highlighted character

    // Calculate padding for both sides of the highlighted character
    let padding = Math.floor((wordWidth - 1) / 2);

    // Combine left part, optimal recognition point, and right part with padding
    let formattedWord = 
        "<span style='color: black;'>" + leftPart + "</span>" +
        "<span style='color: red;'>" + recognitionPoint + "</span>" +
        "<span style='color: black;'>" + rightPart + "</span>";

    // Apply padding for both sides of the formatted word
    formattedWord = formattedWord.padStart(formattedWord.length + padding, ' ');
    formattedWord = formattedWord.padEnd(formattedWord.length + padding, ' ');

    // Display the word
    wordDisplay.innerHTML = formattedWord;
    
    let OldWPM = WPM
    if (Math.abs(WPM-TargetWPM) > SpeedTransitionIncrement){
        let Dir = clamp(TargetWPM-WPM,-1,1)
        WPM = WPM + Dir*SpeedTransitionIncrement
    } else {
        WPM = TargetWPM
    }
    if (OldWPM != WPM){
        console.log(WPM)
    }
    let element = document.getElementById("progress")
    element.style.width = ((index/(Length-1))*100) + "%";
}
ChangeSpeed(150);
UpdateButtonVisuals()